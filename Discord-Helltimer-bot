import discord
from discord.ext import commands
from bs4 import BeautifulSoup
import requests
import asyncio

# Discord IDs
discord_id = '' #Remember to put id's back in
channel_id = ''

# Bot Command Prefix
intents = discord.Intents.default()
intents.typing = False
intents.presences = False
intents.messages = True
intents.guilds = True
intents.members = True
intents.reactions = True
intents.emojis_and_stickers = True
intents.integrations = True
intents.webhooks = True
intents.invites = True
intents.voice_states = True
intents.presences = True
intents.bans = True
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user.name}')
    print('Success')

@bot.command()
async def start_timers(ctx):
    while True:
        try:
            timers = fetch_timers()
            for timer in timers:
                if timer['time'] == '5:00':
                    channel = bot.get_channel(int(channel_id))
                    await channel.send(f"{timer['name']} timer has reached 5 minutes!")
            await asyncio.sleep(60)  # Check timers every minute
        except Exception as e:
            print(f"An error occurred: {e}")

@bot.command()
async def test_message(ctx):
    channel = bot.get_channel(int(channel_id))
    await channel.send("This is a test message!")

def fetch_timers():
    url = 'https://helltides.com/'
    response = requests.get(url)
    if response.status_code == 200:
        html_content = response.text
        soup = BeautifulSoup(html_content, 'html.parser')
        timers = []
        # Perform web scraping to extract timers
        # Make sure to adjust the code based on the HTML structure of the website
        # Here's an example assuming the timers are within <div class="timer"> elements:
        timer_elements = soup.find_all('div', class_='timer')
        for timer_element in timer_elements:
            timer_name = timer_element.find('span', class_='timer-name').text
            timer_time = timer_element.find('span', class_='timer-time').text
            timer_data = {'name': timer_name, 'time': timer_time}
            timers.append(timer_data)
        return timers
    else:
        print(f"Failed to fetch timers. Status code: {response.status_code}")

TOKEN = '' #Remember to put token back in

try:
    bot.run(TOKEN)
except discord.LoginFailure:
    print("Invalid Discord bot token provided.")
except Exception as e:
    print(f"An error occurred while running the bot: {e}")
def fetch_timers():
    response = requests.get('https://helltides.com/api/timers')
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to fetch timers. Status code: {response.status_code}")

TOKEN = 1124510847125954560
client.run(TOKEN)
